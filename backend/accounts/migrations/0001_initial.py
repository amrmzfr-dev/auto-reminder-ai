# Generated by Django 5.2.3 on 2025-08-12 07:56

import accounts.models.installer_models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChargerModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=100)),
                ('model_name', models.CharField(choices=[('ABB Terra AC 22', 'ABB Terra AC 22'), ('ABB Terra DC 50', 'ABB Terra DC 50'), ('Delta DC Wallbox 25', 'Delta DC Wallbox 25'), ('Schneider EVlink AC 22', 'Schneider EVlink AC 22'), ('Siemens VersiCharge 22', 'Siemens VersiCharge 22'), ('Tesla Wall Connector Gen 3', 'Tesla Wall Connector Gen 3')], help_text='Select the charger model', max_length=100)),
                ('power_rating_kw', models.DecimalField(decimal_places=2, max_digits=5)),
                ('connector_type', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(blank=True, choices=[('', 'Choose State'), ('Johor', 'Johor'), ('Kedah', 'Kedah'), ('Kelantan', 'Kelantan'), ('Melaka', 'Melaka'), ('Negeri Sembilan', 'Negeri Sembilan'), ('Pahang', 'Pahang'), ('Penang', 'Penang'), ('Perak', 'Perak'), ('Perlis', 'Perlis'), ('Sabah', 'Sabah'), ('Sarawak', 'Sarawak'), ('Selangor', 'Selangor'), ('Terengganu', 'Terengganu'), ('Kuala Lumpur', 'Kuala Lumpur'), ('Labuan', 'Labuan'), ('Putrajaya', 'Putrajaya')], max_length=20)),
                ('house_type', models.CharField(choices=[('L', 'Landed House'), ('H', 'High-Rise')], default='L', max_length=1)),
                ('postcode', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('pic', models.CharField(max_length=100)),
                ('document', models.FileField(blank=True, null=True, upload_to='tasks/docs/')),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('priority', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], max_length=10)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TestFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_file', models.FileField(upload_to='uploads/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('1', 'Admin'), ('2', 'Installer')], default='2', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InstallerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('company_ssm_number', models.CharField(blank=True, max_length=100, null=True)),
                ('company_address', models.TextField(blank=True, null=True)),
                ('year_established', models.PositiveIntegerField(blank=True, null=True)),
                ('epf_contributors', models.PositiveIntegerField(blank=True, null=True)),
                ('pic_name', models.CharField(blank=True, max_length=255, null=True)),
                ('pic_designation', models.CharField(blank=True, max_length=100, null=True)),
                ('pic_contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('pic_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_st_registered', models.BooleanField(default=False)),
                ('license_class', models.CharField(blank=True, choices=[('A', 'Class A'), ('B', 'Class B'), ('C', 'Class C')], max_length=10, null=True)),
                ('st_certificate', models.FileField(blank=True, null=True, upload_to=accounts.models.installer_models.upload_to_cert)),
                ('is_cidb_registered', models.BooleanField(default=False)),
                ('cidb_category', models.CharField(blank=True, choices=[('B', 'B (Building)'), ('CE', 'CE (Civil Engineering)'), ('ME', 'ME (Mechanical & Electrical)')], max_length=100, null=True)),
                ('cidb_grade', models.CharField(blank=True, choices=[('G1', 'G1'), ('G2', 'G2'), ('G3', 'G3'), ('G4', 'G4'), ('G5', 'G5'), ('G6', 'G6'), ('G7', 'G7')], max_length=10, null=True)),
                ('cidb_certificate', models.FileField(blank=True, null=True, upload_to=accounts.models.installer_models.upload_to_cert)),
                ('is_sst_registered', models.BooleanField(default=False)),
                ('sst_number', models.CharField(blank=True, max_length=100, null=True)),
                ('sst_certificate', models.FileField(blank=True, null=True, upload_to=accounts.models.installer_models.upload_to_cert)),
                ('plwc_has_insurance', models.BooleanField(default=False)),
                ('insurance_certificate', models.FileField(blank=True, null=True, upload_to=accounts.models.installer_models.upload_to_cert)),
                ('coi_history', models.BooleanField(default=False)),
                ('coi_certificate', models.FileField(blank=True, null=True, upload_to=accounts.models.installer_models.upload_to_cert)),
                ('registration_status', models.CharField(choices=[('incomplete', 'Incomplete'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='incomplete', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('operational_states', models.ManyToManyField(blank=True, to='accounts.state')),
            ],
        ),
        migrations.CreateModel(
            name='Installation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installation_id', models.CharField(editable=False, max_length=50, unique=True)),
                ('installation_created_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Scheduled', 'Scheduled'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('On Hold', 'On Hold')], default='Scheduled', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('charger_model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='installations', to='accounts.chargermodel')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='accounts.customer')),
                ('installer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_installations', to='accounts.installerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_date', models.DateField()),
                ('description', models.TextField()),
                ('performed_by', models.CharField(blank=True, help_text='Name of installer or internal staff who performed the service', max_length=100, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('installation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_logs', to='accounts.installation')),
            ],
        ),
    ]
