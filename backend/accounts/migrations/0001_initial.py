# Generated by Django 5.2.3 on 2025-08-05 01:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('pic', models.CharField(max_length=100)),
                ('document', models.FileField(blank=True, null=True, upload_to='tasks/docs/')),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('priority', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], max_length=10)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('1', 'Admin'), ('2', 'Installer')], default='2', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InstallerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255, verbose_name='Registered Company Name')),
                ('company_ssm_number', models.CharField(max_length=50, verbose_name='Company Registration Number (SSM)')),
                ('operational_state', models.CharField(choices=[('Central 1', 'Wilayah Persekutuan KL, Putrajaya'), ('Central 2', 'Selangor'), ('Northern', 'Perak, Kedah, Perlis, Penang'), ('Southern', 'N.Sembilan, Melaka, Johor'), ('East Coast', 'Pahang, Terengganu, Kelantan'), ('East Malaysia', 'Sabah, Sarawak')], max_length=50)),
                ('pic_name', models.CharField(max_length=255, verbose_name='PIC Name')),
                ('pic_designation', models.CharField(max_length=100, verbose_name='PIC Designation')),
                ('pic_contact_number', models.CharField(max_length=15, verbose_name='PIC Contact Number')),
                ('company_address', models.TextField(blank=True, verbose_name='Business Address')),
                ('year_established', models.PositiveIntegerField(blank=True, null=True)),
                ('epf_contributors', models.PositiveIntegerField(blank=True, null=True)),
                ('is_st_registered', models.BooleanField(default=False)),
                ('contractor_license_class', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], max_length=1)),
                ('is_cidb_registered', models.BooleanField(default=False)),
                ('cidb_category', models.CharField(blank=True, max_length=100)),
                ('cidb_grade', models.CharField(blank=True, max_length=20)),
                ('is_sst_registered', models.BooleanField(default=False)),
                ('sst_number', models.CharField(blank=True, max_length=50)),
                ('has_insurance', models.BooleanField(default=False)),
                ('has_coi_history', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='installer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
